<main class="max-w-4xl mx-auto bg-white shadow-md rounded-lg p-8">
  <h1 class="text-2xl font-bold text-blue-600 mb-6">Chat</h1>
  <p class="mb-4">
    Chat between <strong>{{driverUsername}}</strong> (Driver) and <strong>{{riderUsername}}</strong> (Rider)
  </p>

  <!-- Chat Messages -->
  <div id="chatBox" class="border rounded-lg p-4 mb-4 h-64 overflow-y-scroll">
    {{#each chat.messages}}
      <div class="mb-2">
        <span class="font-semibold">{{sender}}:</span>
        <span>{{message}}</span>
        <span class="text-gray-500 text-sm ml-2">{{timestamp}}</span>
      </div>
    {{else}}
      <p>No messages yet. Start the conversation!</p>
    {{/each}}
  </div>

  <!-- Chat Input -->
  <form id="chatForm">
    <div class="flex">
      <textarea
        id="chatMessage"
        placeholder="Type a message..."
        class="flex-1 border border-gray-300 rounded-lg p-2 mr-2 resize-none overflow-hidden"
        rows="1"
        required
      ></textarea>
      <button
        type="submit"
        class="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition duration-300"
      >
        Send
      </button>
      <!-- Request Ride Button -->
      {{#unless requestExists}}
        <button
          type="button"
          id="requestRideButton"
          class="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition duration-300"
        >
          Request Ride
        </button>
      {{else}}
        <button
          type="button"
          class="bg-gray-500 text-white py-2 px-4 rounded-lg cursor-not-allowed hidden"
          disabled
        >
          Ride Requested
        </button>
      {{/unless}}
    </div>
  </form>

  <!-- AJAX Script -->
  <script>
    const chatId = {{{json chatId}}};
    const sender = {{{json user.username}}};
    const rideId = {{{json chat.rideId}}};

    console.log("chatId:", chatId);
    console.log("sender:", sender);

    // Function to fetch messages
    function fetchMessages() {
      fetch(`/chat/messages/${chatId}`)
        .then((response) => response.json())
        .then((data) => {
          const chatBox = document.getElementById("chatBox");
          chatBox.innerHTML = ""; // Clear existing messages

          data.messages.forEach((msg) => {
            const messageDiv = document.createElement("div");
            messageDiv.classList.add("mb-2");
            messageDiv.innerHTML = `
              <span class="font-semibold">${msg.sender}:</span>
              <span>${msg.message}</span>
              <span class="text-gray-500 text-sm ml-2">${new Date(msg.timestamp).toLocaleString()}</span>
            `;
            chatBox.appendChild(messageDiv);
          });

          // Scroll to the bottom of the chatBox
          chatBox.scrollTop = chatBox.scrollHeight;
        })
        .catch((error) => console.error("Error fetching messages:", error));
    }

    // Fetch messages every 2 seconds
    setInterval(fetchMessages, 2000);
    // Fetch messages on page load
    fetchMessages();

    // Auto-resize the textarea while typing
    const chatMessageInput = document.getElementById("chatMessage");
    chatMessageInput.addEventListener("input", function () {
      this.style.height = "auto";
      this.style.height = this.scrollHeight + "px";
    });

    // Handle form submission
    const chatForm = document.getElementById("chatForm");
    chatForm.addEventListener("submit", (e) => {
      e.preventDefault();
      const chatMessage = document.getElementById("chatMessage").value;

      // Send the message via AJAX
      fetch(`/chat/send/${chatId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          sender,
          message: chatMessage,
        }),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then((data) => {
          // Clear the input field
          chatMessageInput.value = "";
          chatMessageInput.style.height = "auto"; // Reset height after clearing
          // Fetch messages to update the chat
          fetchMessages();
        })
        .catch((error) => console.error("Error sending message:", error));
    });

    // Handle Request Ride button
    const requestRideButton = document.getElementById("requestRideButton");
    if (requestRideButton) {
      requestRideButton.addEventListener("click", () => {
        fetch(`/rideRequest`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            rideId,
            rider: sender,
          }),
        })
          .then((response) => {
            return response.text().then((text) => {
              if (response.ok) {
                alert("Request sent");
                window.location.href = "/dashboard";
              } else {
                alert(`Error: ${text}`);
              }
            });
          })
          .catch((error) => console.error("Error requesting ride:", error));
      });
    }
  </script>
</main>
